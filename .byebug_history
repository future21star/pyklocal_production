c
n
c
n
@return_items
n
c
@return_items
n
c
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id")
@date2
@date1
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id", "customer_return_items.id", "customer_return_items.item_return_amount")
c
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id", "customer_return_items.id").sum("customer_return_items.return_quantity")
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id").sum("customer_return_items.return_quantity")
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id", "customer_return_items.id").sum("customer_return_items.return_quantity")
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id", "customer_return_items.id", "customer_return_items.item_return_amount").sum("customer_return_items.return_quantity")
c
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id", "customer_return_items.id").sum("customer_return_items.return_quantity")
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded")
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id", "customzer_return_items.id").sum("customer_return_items.return_quantity")
@return_items
return_items
return_item
c
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id").sum("customer_return_items.return_quantity")
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").group("customer_return_items.line_item_id")
@return_items
variant.tax_category_id.present? ? variant.tax_category.tax_rates.first.amount.to_f : variant.product.tax_category.tax_rates.first.amount.to_f 
variant
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded").first
Spree::CustomerReturnItem.where("DATE(updated_at) >= ? AND DATE(updated_at) <= ? AND store_id = ? AND status = ?",@date1,@date2, @store_id,"refunded")
@return_items
return_item
n
c
total_product_count
N
c
n
c
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2
date1
c
end_date
date
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
c
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
c
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2
date1
end_date
start_date
c
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
c
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
c
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date1
c
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
n
date1
c
date1
start_date
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
n
c
store_sale_array
merchant_hash
n
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
        debugger
n
date
view_mode
c
Date.today - 1.month
Today - 1.month
end_date
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date1 = date1 + 3.month
date1 = date1 - 3.month
date2 = date1 + 3.month
date1
date1 = date1 - 3.month
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2
date2'
date1
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2 = date1 + 1.month
date1 = date1 + 3.month
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2 = date1 + 4.month
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2 = date1 + 3.month
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2 = date1 + 2.month
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
date2
date2 = date1 + 4.month
date2
date1
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
end_date = start_date + 4.month
end_date = start_date + 3.month
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",date1,date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
end_date
start_date
n
merchant_hash
n
merchant_hash
n
c
merchant_hash
n
@date2
@date1
Spree::LineItem.where("(delivery_state = ? OR delivery_type = ?) AND (DATE(spree_line_items.updated_at) >= ? AND DATE(spree_line_items.updated_at) <= ?)","delivered","pickup",@date1,@date2).joins(:product).where(spree_products:{store_id: merchant.id}).collect{|obj| obj.price * obj.quantity}.sum.to_f.round(2)
c
n
@date2
@date1
n
@all_merchants.length
@all_merchants.all
@all_merchants
n
Merchant::Store
n
c
SetCurrentCategory
c
getCurrentCategory
c
params
c
n
seller
n
c
n
c
n
params[:file]
params
n
c
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR ")).where(name: 'foot1')
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR ")).page(params[:page]).per(params[:per_page]).length
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR ")).page(params[:page]).per(params[:per_page])   
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR ")).length
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
)
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
)
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
)
)Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR ")).lengthSpree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR ")).length
Spree::Taxon.where(query.where_values.map(&:to_sql).join(" OR "))
query = Spree::Taxon.where(parent_id:ids, id: ids)
query = Spree::Taxon.where(parent_id:ids)
query
Order.where(query.where_values.map(&:to_sql).join(" OR ")).length
Order.where(query = Order.unscoped.where(uuid: uuids, id: ids)).length
Order.where(query.where_values.inject(:or)).lenght
Order.where(query.where_values.inject(:or))
query = Spree::Taxon.where(parent_id:ids, id:ids)
query 
Spree::Taxon.where(parent_id:ids, id:ids)
Spree::Taxon.where("parent_id:ids, id:ids)
query = Order.unscoped.where(parent_id:ids, id:ids)
Spree::Taxon.where("parent_id in #{ids}").length
Spree::Taxon.where("parent_id in #{ids}").result
Spree::Taxon.where("parent_id in #{ids}")
"parent_id in #{ids}"
parent_id in #{ids}
c
n
m
c
n
@taxons
n
'n
c
Spree::Taxon.where("parent_id in c").length
Spree::Taxon.where("parent_id in {{ids}}").length
Spree::Taxon.where("parent_id in {{ids}}")
Spree::Taxon.where(parent_id:ids).or(Spree::Taxon.where(id:ids))
Spree::Taxon.where(parent_id:ids).merge(Spree::Taxon.where(id:ids)).length
Spree::Taxon.where(parent_id:ids).merge(Spree::Taxon.where(id:ids))
Spree::Taxon.where(parent_id:ids).merge([])
Spree::Taxon.where(parent_id:ids, id:ids).length
Spree::Taxon.where(parent_id:ids, id:ids)
Spree::Taxon.where(parent_id:ids AND id:ids)
Spree::Taxon.where(parent_id:ids OR id:ids)
Spree::Taxon.where(parent_id:ids)
Spree::Taxon.where(parent_id in ids).length
Spree::Taxon.where((parent_id in ids).or(id in ids)).length
Spree::Taxon.where((parent_id:ids).or(id:ids)).length
Spree::Taxon.where(parent_id:ids or id:ids).length
Spree::Taxon.where(parent_id:ids).length
Spree::Taxon.where(parent_id:ids)
Spree::Taxon.find(ids).length
Spree::Taxon.find(ids)
ids
@ids
n
@ids
n
c
n
ids
ids.push("123")
@taxons.first.id
@taxons.first
@ids
n
Spree::Taxon.all.page(params[:page]).per(params[:per_page])   
Spree::Taxon.all
@taxons.page(params[:page]).per(params[:per_page])   
c
Spree::Taxon.find(["16", "38"])
c
ids
n
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft).ransack(params[:q]).resultn
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft).ransack(params[:q]).result
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft).ransack(params[:q])
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft)current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft).ransack(params[:q])
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft)
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft).ransack(params[:q]).result
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft).ransack(params[:q])
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft).length
current_spree_user.stores.first.spree_taxons.order(:taxonomy_id, :lft)
current_spree_user.stores.first.spree_taxons.result
current_spree_user.stores.first.spree_taxons
n
c
new
new.find("38")
new.length
